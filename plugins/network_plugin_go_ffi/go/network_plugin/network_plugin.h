/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package network_plugin */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 4 "network_plugin.go"

#if !_WIN32
#define __declspec(dllexport)
#endif

#include <stdlib.h>
#include "register_callback.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void InitWebRTC(char* Config);
extern __declspec(dllexport) char* CreateSession(int SessionID);
extern __declspec(dllexport) char* Offer(int SessionID);
extern __declspec(dllexport) char* JoinSession(int SessionID, char* sdpBase64);
extern __declspec(dllexport) char* Answer(int SessionID);
extern __declspec(dllexport) char* ConfirmAnswer(int SessionID, char* sdpBase64);
extern __declspec(dllexport) char* Send(int SessionID, char* data, int size);
extern __declspec(dllexport) char* Ready();
extern __declspec(dllexport) char* DropSession(int SessionID);
extern __declspec(dllexport) char* ReloadConfig(char* ConfJson);
extern __declspec(dllexport) char* Discard();
extern __declspec(dllexport) int sum(int a, int b);
extern __declspec(dllexport) int sum_long_running(int a, int b);
extern __declspec(dllexport) void registerCallback(void* binop);
extern __declspec(dllexport) void start_fetch();
extern __declspec(dllexport) char* getHTTPHeaderFirstLine(char* cUrl);

// Free the memory allocated for the C string
extern __declspec(dllexport) void freeCString(char* cstr);
extern __declspec(dllexport) void enforce_binding();

#ifdef __cplusplus
}
#endif
